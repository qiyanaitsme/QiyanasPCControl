import telebot
import os
import time
import subprocess
import platform
import uuid
import psutil
import requests
import re
import time
import socket
from PIL import ImageGrab
from telebot import types

# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ token.txt
with open("token.txt", "r") as file:
    token = file.read().strip()

bot = telebot.TeleBot(token)

user_data = {}

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id

    image_path = os.path.join(os.getcwd(), 'satara.jpg')
    with open(image_path, 'rb') as photo:
        bot.send_photo(chat_id, photo)

    bot.send_chat_action(chat_id, 'typing')
    time.sleep(1)
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –æ—Ç –°–∞—Ç–∞—Ä—ã. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

    bot.send_chat_action(chat_id, 'typing')
    time.sleep(1)
    bot.send_message(chat_id, "–ú–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ GITHUB. –¢—É—Ç –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞.:")
    bot.send_message(chat_id, "https://github.com/sataraitsme/satarapccontrol")

    bot.send_chat_action(chat_id, 'typing')
    time.sleep(1)
    bot.send_message(chat_id, "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –≤ Telegram:")
    bot.send_message(chat_id, "https://t.me/sherbyaakodanel")

    bot.send_chat_action(chat_id, 'typing')
    time.sleep(1)
    show_actions(chat_id)

def show_actions(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    shutdown_button = types.InlineKeyboardButton("–í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö üîå", callback_data="shutdown")
    restart_button = types.InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö ‚åö", callback_data="restart")
    sleep_button = types.InlineKeyboardButton("–°–ø—è—â–∏–π —Ä–µ–∂–∏–º üò¥", callback_data="sleep")
    network_info_button = types.InlineKeyboardButton("–ò–Ω—Ñ–∞ –æ IP üì≤", callback_data="network_info")
    screenshot_button = types.InlineKeyboardButton("–°–∫—Ä–∏–Ω –†–∞–±–æ—á–µ–≥–æ –°—Ç–æ–ª–∞ üì∏", callback_data="screenshot")
    system_info_button = types.InlineKeyboardButton("–ò–Ω—Ñ–∞ –æ PC üíª", callback_data="system_info")
    load_button = types.InlineKeyboardButton("–ù–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å üí™", callback_data="load")
    send_file_button = types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª üìÅ", callback_data="send_file")
    open_file_button = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª üìÇ", callback_data="open_file")
    markup.add(shutdown_button, restart_button, sleep_button, network_info_button, screenshot_button, system_info_button, load_button, send_file_button, open_file_button)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_button_click(call):
    chat_id = call.message.chat.id
    if call.data == 'shutdown':
        os.system('shutdown /s /t 0')
        bot.send_message(chat_id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
    elif call.data == 'restart':
        os.system('shutdown /r /t 0')
        bot.send_message(chat_id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
    elif call.data == 'sleep':
        os.system('rundll32.exe powrprof.dll,SetSuspendState 0,1,0')
        bot.send_message(chat_id, "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º...")
    elif call.data == 'network_info':
        show_network_info(chat_id)
    elif call.data == 'screenshot':
        take_screenshot(chat_id)
    elif call.data == 'system_info':
        show_system_info(chat_id)
    elif call.data == 'load':
        show_load_info(chat_id)
    elif call.data == 'send_file':
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –æ—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª:")
        bot.register_next_step_handler(call.message, get_folder_path)
    elif call.data == 'open_file':
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å:")
        bot.register_next_step_handler(call.message, open_file)

    show_actions(chat_id)

def get_folder_path(message):
    chat_id = message.chat.id
    folder_path = message.text
    user_data[chat_id] = {'folder_path': folder_path}
    bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ:")
    bot.register_next_step_handler(message, save_file)

def save_file(message):
    chat_id = message.chat.id
    folder_path = user_data[chat_id]['folder_path']
    file_info = bot.get_file(message.document.file_id)
    file_content = bot.download_file(file_info.file_path)

    file_path = os.path.join(folder_path, message.document.file_name)
    with open(file_path, 'wb') as file:
        file.write(file_content)

    bot.send_message(chat_id, f"–§–∞–π–ª {message.document.file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ {folder_path}")
    show_actions(chat_id)

def open_file(message):
    chat_id = message.chat.id
    file_path = message.text

    try:
        if platform.system() == 'Windows':
            os.startfile(file_path)
        elif platform.system() == 'Darwin':
            subprocess.Popen(['open', file_path])
        else:
            subprocess.Popen(['xdg-open', file_path])
        bot.send_message(chat_id, f"–§–∞–π–ª {file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    show_actions(chat_id)

def show_network_info(chat_id):
    external_ip = requests.get('https://api.ipify.org').text
    geoip_response = requests.get(f'http://ip-api.com/json/{external_ip}').json()
    mac_address = ':'.join(re.findall('..', '%012x' % uuid.getnode()))

    network_info = f"–í–Ω–µ—à–Ω–∏–π IP: {external_ip}\n"
    network_info += f"–°—Ç—Ä–∞–Ω–∞: {geoip_response['country']}\n"
    network_info += f"–†–µ–≥–∏–æ–Ω: {geoip_response['regionName']}\n"
    network_info += f"–ì–æ—Ä–æ–¥: {geoip_response['city']}\n"
    network_info += f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {geoip_response['timezone']}\n"
    network_info += f"–ò–º—è —Ö–æ—Å—Ç–∞: {socket.gethostname()}\n"

    bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏:\n" + network_info)

def take_screenshot(chat_id):
    screenshot_filename = 'screenshot.png'
    ImageGrab.grab().save(screenshot_filename)
    with open(screenshot_filename, "rb") as photo:
        bot.send_photo(chat_id, photo)
    os.remove(os.path.join(os.getcwd(), screenshot_filename))

def show_system_info(chat_id):
    system_info = f"–û–°: {platform.system()}\n"
    system_info += f"–ò–º—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {platform.node()}\n"
    system_info += f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}\n"
    system_info += f"–í–µ—Ä—Å–∏—è –û–°: {platform.version()}\n"
    system_info += f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {os.getlogin()}\n"

    bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ:\n" + system_info)

def show_load_info(chat_id):
    cpu_load = psutil.cpu_percent(interval=1)
    memory_usage = psutil.virtual_memory().percent
    disk_usage = psutil.disk_usage('/').percent

    load_info = f"–ó–∞–≥—Ä—É–∑–∫–∞ –¶–ü: {cpu_load}%\n"
    load_info += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage}%\n"
    load_info += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_usage}%\n"

    bot.send_message(chat_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä—É–∑–∫–µ:\n" + load_info)

bot.polling()
